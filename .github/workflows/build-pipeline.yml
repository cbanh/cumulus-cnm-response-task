name: Build

on:
  # Triggers the workflow on push events
  push:
    branches: [ develop, release/**, main, feature/**, master ]

    # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ARTIFACT_BASE_NAME: cnmResponse
  # Need to change owner back
  UPLOAD_URL: https://api.github.com/repos/cbanh/cumulus-cnm-response-task
  GITHUB_USER: cbanh


jobs:
  # First job name
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8.0.232'
      - name: Install Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Python dependencies
        run: |
          pip3 install -r builder/requirements.txt
      - name: Run Python builder
        run: |
          python3 builder/builder.py -d . -a ${{env.ARTIFACT_BASE_NAME}}
      - name: Get Version
        id: get-version
        run: |
          if [ -f release/version.txt ]; then
            echo "release exists"
            echo "Version: $(cat release/version.txt)"
          else
            echo "version.txt does not exist"
          fi
      - name: Commit pom.xml
        run: |
          RELEASE_VERSION="$(cat release/version.txt)"
          git config user.name "podaac-cloud-IandA"
          echo 'git config user.name completed'
          git config user.email curtis.banh@gmail.com
          echo 'git config email completed'
          git commit -m 'Release:'$RELEASE_VERSION pom.xml
          echo 'git committed pom.xml with: '$RELEASE_VERSION
          echo 'About to push to branch : '$GIT_LOCAL_BRANCH
          echo 'GIT_LOCAL_BRANCH:'$GIT_LOCAL_BRANCH
          echo 'GIT_BRANCH:'$GIT_BRANCH
          git branch
          git status
          # git push
          echo 'git pushed pom.xml with version: '$RELEASE_VERSION

          echo "*** Release Version is : "$RELEASE_VERSION
          ls -la release
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | sed 's/[[:space:]]/ /g' |sed "s/'/ /g")
          echo "COMMIT MESSAGE is: "$COMMIT_MESSAGE
          curl -v -i -X POST -H "Content-Type:application/json" -H "Authorization: token ${{secrets.GIT_UPLOAD_TOKEN}}" ${UPLOAD_URL}/releases -d '{"tag_name":"v'${RELEASE_VERSION}'","target_commitish": "'${CURRENT_BRANCH}'","name": "v'${RELEASE_VERSION}'","body": "release version v'${RELEASE_VERSION}' created by Github Actions","draft": false,"prerelease": false}' > release_create.out
          cat release_create.out
          ASSET_URL=$(cat release_create.out | grep upload_url |sed 's/^\s*"upload_url": "//' |sed 's/assets.*$/assets/')
          cp release/*.zip .
          curl -H "Authorization: token ${{secrets.GIT_UPLOAD_TOKEN}}" -H "Content-Type: $(file -b --mime-type ${{env.ARTIFACT_BASE_NAME}}-${RELEASE_VERSION}.zip)" --data-binary @${{env.ARTIFACT_BASE_NAME}}-${RELEASE_VERSION}.zip "${ASSET_URL}?name=${{env.ARTIFACT_BASE_NAME}}-${RELEASE_VERSION}.zip"