name: Build

on:
  # Triggers the workflow on push events
  push:
    branches: [ develop, release/**, feature/**, master, main ]

    # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  ARTIFACT_BASE_NAME: cnmResponse
  # Need to change owner back
  UPLOAD_URL: https://api.github.com/repos/cbanh/cumulus-cnm-response-task
  GITHUB_USER: cbanh

jobs:
  # First job name
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8.0.232'
      - uses: gradle/gradle-build-action@v1
        with:
          gradle-version: 4.0.1
      - name: Install Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Python dependencies
        run: |
          pip3 install -r builder/requirements.txt
      - name: Extract Maven project version
        run: echo ::set-output name=current_version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
        id: get-version
      - name: Show extracted Maven project version
        run: |
          echo ${{ steps.get-version.outputs.current_version }}
          base_ver="$(python3 builder/bump-version.py -v ${{ steps.get-version.outputs.current_version }} --get-base)"
          echo "base_ver=$base_ver" >> $GITHUB_ENV
      - name: Bump pre-alpha version
        # If triggered by push to a feature branch
        if: ${{ startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          git_sha="$(git rev-parse --short ${GITHUB_SHA})"          
          echo "git sha=$git_sha"
          new_ver="${base_ver}+$git_sha"
          echo "software_version=$new_ver" >> $GITHUB_ENV
      - name: Bump alpha version
        # If triggered by push to the develop branch
        if: ${{ github.ref == 'refs/heads/develop' }}
        run: |
          bump_ver="$(python3 builder/bump-version.py -v ${{ steps.get-version.outputs.current_version }})"
          if [[ "$bump_ver" == "None" ]]; then
            bump_ver='0'
          fi
          new_ver="${base_ver}-alpha.${bump_ver}-SNAPSHOT"
          echo "software_version=$new_ver" >> $GITHUB_ENV
      - name: Bump rc version
        # If triggered by push to a release branch
        if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
        run: |
          bump_ver="$(python3 builder/bump-version.py -v ${{ steps.get-version.outputs.current_version }})"
          if [[ "$bump_ver" == "None" ]]; then
            bump_ver='0'
          fi
          new_ver="${base_ver}-rc.${bump_ver}"
          echo "software_version=$new_ver" >> $GITHUB_ENV
      - name: Release version
        # If triggered by push to the main branch
        if: ${{ startsWith(github.ref, 'refs/heads/main') }}
        env:
          CURRENT_VERSION: ${{ steps.get-version.outputs.current_version }}
        # Remove -rc.* from end of version string
        # The ${string%%substring} syntax below deletes the longest match of $substring from back of $string.
        run: |
          new_ver="${CURRENT_VERSION%%-rc.*}"
          echo "software_version=$new_ver" >> $GITHUB_ENV
      - name: Build new version
        run: |
          echo "New Version is: ${{ env.software_version }}"
          python3 builder/builder2.py -d . -a ${{env.ARTIFACT_BASE_NAME}} -v ${{ env.software_version }}
      # - name: Commit pom.xml
      #   if: contains(github.ref, 'master')
      #   run: |
      #     RELEASE_VERSION="$(cat release/version.txt)"
      #     git config user.name "podaac-cloud-IandA"
      #     echo 'git config user.name completed'
      #     git config user.email curtis.banh@gmail.com
      #     echo 'git config email completed'
      #     git commit -m 'Release:'$RELEASE_VERSION pom.xml
      #     echo 'git committed pom.xml with: '$RELEASE_VERSION
      #     echo 'About to push to branch : '$GIT_LOCAL_BRANCH
      #     echo 'GIT_LOCAL_BRANCH:'$GIT_LOCAL_BRANCH
      #     echo 'GIT_BRANCH:'$GIT_BRANCH
      #     git branch
      #     git status
      #     git push
      #     echo 'git pushed pom.xml with version: '$RELEASE_VERSION
      - name: Prepare Artifacts
        run: |
          artifact_file="${{env.ARTIFACT_BASE_NAME}}-${{ env.software_version }}.zip"
          echo "ARTIFACT_FILE=$artifact_file" >> $GITHUB_ENV
          cp release/*.zip "${{ env.ARTIFACT_FILE }}"
      - name: Upload and Tag Release
        if: contains(github.ref, 'master')
        run: |
          RELEASE_VERSION="$(cat release/version.txt)"
          echo "*** Release Version is : "$RELEASE_VERSION
          ls -la release
          cp release/*.zip .
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | sed 's/[[:space:]]/ /g' |sed "s/'/ /g")
          echo "COMMIT MESSAGE is: "$COMMIT_MESSAGE          
          curl -v -i -X POST -H "Content-Type:application/json" -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" ${UPLOAD_URL}/releases -d '{"tag_name":"v'${RELEASE_VERSION}'","target_commitish": "'${CURRENT_BRANCH}'","name": "v'${RELEASE_VERSION}'","body": "release version v'${RELEASE_VERSION}' created by Github Actions ${{ env.change_log }}", "draft": false,"prerelease": false}' > release_create.out
          cat release_create.out
          ASSET_URL=$(cat release_create.out | grep upload_url |sed 's/^\s*"upload_url": "//' |sed 's/assets.*$/assets/')
          echo "ASSET_URL is: " $ASSET_URL
          echo 'curl -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" -H "Content-Type: $(file -b --mime-type ${{env.ARTIFACT_BASE_NAME}}-'${RELEASE_VERSION}'.zip)" --data-binary @${{env.ARTIFACT_BASE_NAME}}-'${RELEASE_VERSION}'.zip "'${ASSET_URL}'?name=${{env.ARTIFACT_BASE_NAME}}-'${RELEASE_VERSION}'.zip"'
          curl -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" -H "Content-Type: $(file -b --mime-type ${{env.ARTIFACT_BASE_NAME}}-${RELEASE_VERSION}.zip)" --data-binary "@${{env.ARTIFACT_BASE_NAME}}-${RELEASE_VERSION}.zip" "${ASSET_URL}?name=${{env.ARTIFACT_BASE_NAME}}-${RELEASE_VERSION}.zip"
      - name: Create Release
        id: create_release
        if: ${{ !contains(github.ref, 'master') }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: "v${{ env.software_version }}"
          release_name: "Release v${{ env.software_version }} - ${{ github.ref }}"
          body: |
            Changes in this Release
            - First Change - abc
            - Second Change - def
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: "${ARTIFACT_FILE}"
          asset_name: "${ARTIFACT_FILE}"
          asset_content_type: application/zip
      - name: Commit Version Bump
        # If building develop, a release branch, or main then we commit the version bump back to the repo
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release')
        run: |
          git config --global user.name 'podaac-cloud-IandA'
          git config --global user.email 'podaac-cloud-IandA@jpl.nasa.gov'
          git commit -m "/version ${{ env.software_version }}" pom.xml
          git push
          
      # - name: "Generate release changelog"
      #   uses: heinrichreimer/github-changelog-generator-action@v2.3
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }} 
      # - name: Create Release
      #   uses: actions/create-release@v1
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: ${{ github.ref }}
      #     body: ${{ env.change_log }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}